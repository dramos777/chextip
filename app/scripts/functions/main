# Functions
# Get ATA current IP
CommandSSH () {
	RANDOM_F="$RANDOM"
	sshpass -p "$SSH_PASSWORD" ssh -p $SSH_PORT -o StrictHostKeyChecking=no "$SSH_USER"@"$SSH_HOST" "$SSH_COMMAND" 2> "$DIRTMP/${RANDOM_F}_ERROR"

}

# Get current Public IP and update it if necessary
UpdatePubIP () {
        # Check current RB Public IP
	SSH_COMMAND="/ip cloud print"
	RB_PUB_IP=$(CommandSSH | egrep -i 'public-address' | sed -n 's/.*\b\([0-9]\{1,3\}\(\.[0-9]\{1,3\}\)\{3\}\)\b.*/\1/p' | tr -d '\n')

	# Check current IP in SQL rb_pub_ip field
	SQL_PUB_IP=$(mysql -h "$MYSQL_HOST" -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -D "$MYSQL_DATABASE" -se "SELECT c.rb_pub_ip FROM condominium c JOIN branch b ON c.id = b.condominium_id WHERE b.branch_number = "\'$BRANCH_NUMBER\'";" -N)

	# Get condominium name and update rb_pub_ip
	if [ $RB_PUB_IP != $SQL_PUB_IP ];then
		
		COND_DESCRIPTION=$(mysql -h "$MYSQL_HOST" -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -D "$MYSQL_DATABASE" -se "SELECT c.name FROM condominium c JOIN branch b ON c.id = b.condominium_id WHERE b.branch_number = "\'$BRANCH_NUMBER\'";" -N)

		# Update rb_pub_ip in SQL Server
		mysql -h "$MYSQL_HOST" -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -D "$MYSQL_DATABASE" -se "UPDATE condominium c JOIN branch b ON c.id = b.condominium_id SET c.rb_pub_ip = "\'$RB_PUB_IP\'" WHERE b.branch_number = "\'$BRANCH_NUMBER\'";"

		RANDOM_F="$RANDOM"
		cat "$SELENIUM/pbx.py" | \
			sed -e "s/RB_PUB_IP/$RB_PUB_IP/g" \
			-e "s/SIPURL/$SIPURL/g" \
			-e "s/PBXUSER/$PBXUSER/g" \
			-e "s/PBXPASSWORD/$PBXPASSWORD/g" \
			-e "s/COND_DESCRIPTION/$COND_DESCRIPTION/g" > "$DIRTMP/${RANDOM_F}_pbx.py" \
			&& python "$DIRTMP/${RANDOM_F}_pbx.py" &

	fi

}

# Error test ssh
ErrorSSH () {
	if [ $? != 0 ]; then
		ERROR="$(cat $DIRTMP/${RANDOM}_ERROR)"
		echo "$TIME" "$SSH_HOST" "$ERROR"
		exit 1
	fi
}
#
# Script python was running successfully?
PythonError(){
	if [ "$?" != 0 ]; then
		echo "Reinicialização falhou. Por favor, entre em contato com o TI de plantão e reporte o erro."
		echo ""
		echo "Python Script Error $DATE $TIME" && exit 1
	fi
}

# Filter for IP Address
GrepIP () {
	grep -E -o '([0-9]{1,3}\.){3}[0-9]{1,3}'
}

ClearTMP () {
	rm -rf $DIRTMP/${RANDON_F}_main.py
}

