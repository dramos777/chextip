#!/usr/bin/env bash

source "/app/scripts/var/environment"

echo "================================================================================"
echo "Reinicialização do ramal/dispositivo $1 iniciada. ($STARTDATE $STARTTIME)"
echo "================================================================================"

# Ensure IP available to change
if grep -q 49 "$F_ATAIPS"; then
    echo "" > "$F_ATAIPS"
fi

MODEL=""
[ ! -z "$2" ] && MODEL="$(echo $2|tr '[:upper:]' '[:lower:]'|sed 's/[ \-_,.]//g')"
#Ensure at least one argument
[ -z "$1" ] && echo "Argument needed!" && exit 1

#Importing functions
    source "$F_FUNCTION"
    source "$F_FUNCTION_REBOOT"

#Phone extension number
PHONE_EXTENSION="$1"

#RouterOS IP
SSH_HOST=$(mysql -h "$MYSQL_HOST" -u "$MYSQL_USER" -p"$MYSQL_PASSWORD" -D "$MYSQL_DATABASE" -se "SELECT c.rb_host_ip FROM condominium c JOIN branch b ON c.id = b.condominium_id WHERE b.branch_number = "\'$BRANCH_NUMBER\'";" -N)

#Configuring ATA IPS to swap for
NETRANGE="$(echo $SSH_HOST|cut -d"." -f3)"

for i in $(seq 10 49); do
  TMPATAIP+="$PREFIXIP$NETRANGE.$i:"
done

ATAIP="$TMPATAIP"
unset TMPATAIP

#Command to discovery current ATA IP
SSH_COMMAND="/ip dhcp-server lease print where comment~\"$1\""

#Get current ATA IP 
CURRENTDEVICEIP="$(CommandSSH | GrepIP)"
ErrorSSH

ping -c5 "$CURRENTDEVICEIP" 2>&1 > /dev/null

[ "$?" != 0 ] && echo "Ramal/Dispositivo $PHONE_EXTENSION - MODELO: $2 inacessível. Problema precisa ser analisado no local" && exit 0

#ATA IP for telnet reboot
TELNET_HOST="$CURRENTDEVICEIP"

#### Execution ####
#Command to discovery all active ATAs IPs
SSH_COMMAND="/ip dhcp-server lease print"
CommandSSH | GrepIP > $F_LEASES
ErrorSSH

#Comparing leases IPs and last IPs changed and adding new IPs
while read -r ip; do
    if cat "$F_ATAIPS" | grep -wq "$ip"
    then
        continue
    else
        echo "$ip" >> "$F_ATAIPS" 2>/dev/null
    fi
done < "$F_LEASES"

#Comparing active IPs and last IPs changed
for ip in $(echo $ATAIP | tr ":" "\n");do
    if cat "$F_ATAIPS" | grep -wq "$ip"
    then
        continue
    else
        ATAIP=$(echo "$ip") && break
    fi
done

#Remove connections
SSH_COMMAND="/ip firewall connection remove [find src-address~\""$CURRENTDEVICEIP"\"]"
CommandSSH 2>&1 > /dev/null
ErrorSSH

#Changing variable SSH_COMMAND to change ATA IP Address
SSH_COMMAND="/ip dhcp-server lease set address="$ATAIP" [find where comment~\""$PHONE_EXTENSION"\"]"
#Rebooting ATA
if [ ! -z "$MODEL" ]; then
	case "$MODEL" in
	       	grandstream|ht813|ht814|ht815|ht503|gxw|gxw410x) Grandstream 2>&1 > /dev/null \
			    && CommandSSH \
			    && ErrorSSH \
			    && UpdatePubIP \
			    && ClearTMP ;;

		linksys|spa3000|spa3102) Linksys 2>&1 > /dev/null \
			    && CommandSSH \
			    && ErrorSSH \
			    && UpdatePubIP \
			    && ClearTMP ;;

		ata200) Ata200 2>&1 >/dev/null \
			    && PythonError \
			    && CommandSSH \
			    && ErrorSSH \
			    && UpdatePubIP \
			    && ClearTMP ;;

		gkm|gkm2210t) Gkm2210t 2>&1 > /dev/null \
			    && PythonError \
			    && CommandSSH \
			    && ErrorSSH \
			    && UpdatePubIP \
			    && ClearTMP ;;

		khomp|16m4l) Khomp 2>&1 > /dev/null \
			    && PythonError \
			    && CommandSSH \
			    && ErrorSSH \
			    && UpdatePubIP \
			    && ClearTMP ;;

	       ss3530) Intelbras_ss3530 2>&1 > /dev/null \
			    && PythonError \
			    && UpdatePubIP \
			    && ClearTMP ;;

	       ss3532) Intelbras_ss3532 2>&1 > /dev/null \
			    && PythonError \
			    && UpdatePubIP \
			    && ClearTMP ;;

	           xpe3200) Intelbras_xpe3200 2>&1 > /dev/null \
			    && PythonError \
			    && UpdatePubIP \
			    && ClearTMP ;;

	           linear) LinearModule 2>&1 > /dev/null \
			    && PythonError \
			    && ClearTMP ;;

	           nice) NiceModule 2>&1 > /dev/null \
			    && PythonError \
			    && ClearTMP ;;

			 *) echo "O modelo $2 não é compativel com a API. Por favor, entre em contato com o Administrador!" && exit 0 ;;
	esac
fi

[ ! -z "$(ls -A $DIRTMP/)" ] && rm -rf $DIRTMP/*

TIME="$(date "+%H:%M:%S")"

echo "Reinicialização do ramal/dispositivo $1 finalizada. ($DATE $TIME)"
echo "================================================================================"
echo "Por favor, aguarde 2min e realize um novo teste no ramal/dispositivo $1"
echo "================================================================================"

